{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","recipeSearch","type","name","placeholder","className","Recipe","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","substring","Math","floor","social_rank","Link","to","pathname","concat","state","App","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","this","Recipes","Component","currentRecipe","api_req","api_res","location","publisher","href","publisher_url","React","Router","HashRouter","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffb7e381.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => (\r\n    <form onSubmit={props.recipeSearch}>\r\n        <input type=\"text\" name=\"recipe\" placeholder=\"Enter Food...\"/>\r\n        <button className=\"btn btn-sm btn-info\">Search</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Recipe = (props) => (\r\n    <div>\r\n        <div className=\"grid\">\r\n          {props.recipes.map((recipe) => {\r\n            return (\r\n              <div key={recipe.recipe_id}>\r\n                <img src={recipe.image_url} alt={recipe.title} />\r\n                <h5>{recipe.title.length > 20 ? recipe.title.substring(0, 20) + '...' : recipe.title}</h5>\r\n                <h6>Rating: <span>{Math.floor(recipe.social_rank)}</span></h6>\r\n                <button className=\"btn btn-warning\">\r\n                  <Link to={{\r\n                    pathname: `/recipe/${recipe.recipe_id}`,\r\n                    state: {recipe: recipe.title}\r\n                    }}>View Recipe\r\n                  </Link>\r\n                </button>\r\n              </div>              \r\n            )\r\n          })}  \r\n        </div>        \r\n    </div>    \r\n)\r\n\r\nexport default Recipe;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nclass App extends Component {\n  // Initial state empty, nothing displayed\n  state = {\n    recipes: []    \n}\n  \n  // Search click runs recipe search function\n  //Async/Await Fetch\n  recipeSearch = async (e) => {\n    e.preventDefault();\n    const api_key = '979fd7f52ad690d13df769d5206d6e05';\n    const recipe = e.target.elements.recipe.value;\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${api_key}&q=${recipe}&count=20`);    \n    const data = await api_call.json();\n    // console.log(data);\n\n    this.setState({\n      recipes: data.recipes\n    });               \n  }\n\n  // Keeps search results in local storage\n  componentDidMount = () => {\n    const json = localStorage.getItem('recipes');\n    const recipes = JSON.parse(json);\n    this.setState({recipes});\n  }\n\n  componentDidUpdate = () => {\n    // Convert to string for local storage\n    const recipes = JSON.stringify(this.state.recipes);\n    // Local storage keeps search results\n    localStorage.setItem('recipes', recipes);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"header_title\">SEARCH RECIPES</h1>        \n        <Form recipeSearch={this.recipeSearch}/>        \n        <Recipes recipes={this.state.recipes}/>        \n      </div>\n    );\n  }\n}\n\nexport default App; \n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Recipe extends React.Component {\r\n    state = {\r\n        currentRecipe: []\r\n    }\r\n\r\n    componentDidMount = async () => {        \r\n        const api_key = '979fd7f52ad690d13df769d5206d6e05';\r\n        const title = this.props.location.state.recipe;\r\n        const api_req = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${api_key}&q=${title}`);        \r\n        const api_res = await api_req.json();    \r\n        this.setState({\r\n            currentRecipe: api_res.recipes[0]\r\n        })          \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"recipe_page\">\r\n                <h1 className=\"header_title\">SEARCH RECIPES</h1>\r\n                <img src={this.state.currentRecipe.image_url} alt={this.state.currentRecipe.recipe_id} />                \r\n                <h4>{this.state.currentRecipe.title}</h4>\r\n                <h5>Published by: <span>{this.state.currentRecipe.publisher}</span></h5>\r\n                <h5>Link: <a href={this.state.currentRecipe.publisher_url}>{this.state.currentRecipe.publisher_url}</a></h5>\r\n                <h6>Rating: <span>{Math.floor(this.state.currentRecipe.social_rank)}</span></h6>                \r\n                <button className=\"btn btn-warning\">\r\n                   <Link to=\"/\">Back</Link>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport { HashRouter, Switch, Route} from 'react-router-dom';\r\nimport App from '../App';\r\nimport Recipe from './Recipe';\r\n\r\nconst Router = () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/recipe/:id\" component={Recipe} />\r\n        </Switch>\r\n    </HashRouter>\r\n)\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}